// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/model/time.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/model/time.go -destination=internal/mock/mock_time.go
//
// Package mock_model is a generated GoMock package.
package mock_model

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomTimeInterface is a mock of CustomTimeInterface interface.
type MockCustomTimeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomTimeInterfaceMockRecorder
}

// MockCustomTimeInterfaceMockRecorder is the mock recorder for MockCustomTimeInterface.
type MockCustomTimeInterfaceMockRecorder struct {
	mock *MockCustomTimeInterface
}

// NewMockCustomTimeInterface creates a new mock instance.
func NewMockCustomTimeInterface(ctrl *gomock.Controller) *MockCustomTimeInterface {
	mock := &MockCustomTimeInterface{ctrl: ctrl}
	mock.recorder = &MockCustomTimeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomTimeInterface) EXPECT() *MockCustomTimeInterfaceMockRecorder {
	return m.recorder
}

// NowDateOnly mocks base method.
func (m *MockCustomTimeInterface) NowDateOnly() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowDateOnly")
	ret0, _ := ret[0].(string)
	return ret0
}

// NowDateOnly indicates an expected call of NowDateOnly.
func (mr *MockCustomTimeInterfaceMockRecorder) NowDateOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowDateOnly", reflect.TypeOf((*MockCustomTimeInterface)(nil).NowDateOnly))
}
